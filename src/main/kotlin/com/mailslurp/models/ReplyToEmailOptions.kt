/**
* MailSlurp API
* MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
*
* The version of the OpenAPI document: 6.5.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.mailslurp.models


import com.squareup.moshi.Json

/**
 * Options for replying to email with API
 * @param attachments List of uploaded attachments to send with the reply. Optional.
 * @param body Body of the reply email you want to send
 * @param charset The charset that your message should be sent with. Optional. Default is UTF-8
 * @param from The from header that should be used. Optional
 * @param isHTML Is the reply HTML
 * @param replyTo The replyTo header that should be used. Optional
 * @param sendStrategy When to send the email. Typically immediately
 * @param template Template ID to use instead of body. Will use template variable map to fill defined variable slots.
 * @param templateVariables Template variables if using a template
 */

data class ReplyToEmailOptions (
    /* List of uploaded attachments to send with the reply. Optional. */
    @Json(name = "attachments")
    val attachments: kotlin.collections.List<kotlin.String>? = null,
    /* Body of the reply email you want to send */
    @Json(name = "body")
    val body: kotlin.String? = null,
    /* The charset that your message should be sent with. Optional. Default is UTF-8 */
    @Json(name = "charset")
    val charset: kotlin.String? = null,
    /* The from header that should be used. Optional */
    @Json(name = "from")
    val from: kotlin.String? = null,
    /* Is the reply HTML */
    @Json(name = "isHTML")
    val isHTML: kotlin.Boolean? = null,
    /* The replyTo header that should be used. Optional */
    @Json(name = "replyTo")
    val replyTo: kotlin.String? = null,
    /* When to send the email. Typically immediately */
    @Json(name = "sendStrategy")
    val sendStrategy: ReplyToEmailOptions.SendStrategy? = null,
    /* Template ID to use instead of body. Will use template variable map to fill defined variable slots. */
    @Json(name = "template")
    val template: java.util.UUID? = null,
    /* Template variables if using a template */
    @Json(name = "templateVariables")
    val templateVariables: kotlin.Any? = null
) {

    /**
     * When to send the email. Typically immediately
     * Values: sINGLEMESSAGE
     */
    enum class SendStrategy(val value: kotlin.String) {
        @Json(name = "SINGLE_MESSAGE") sINGLEMESSAGE("SINGLE_MESSAGE");
    }
}

