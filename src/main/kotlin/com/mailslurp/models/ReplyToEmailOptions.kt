/**
* MailSlurp API
* MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
*
* The version of the OpenAPI document: 6.5.2
* Contact: contact@mailslurp.dev
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.mailslurp.models


import com.google.gson.annotations.SerializedName

/**
 * Options for replying to email with API
 * @param body Body of the reply email you want to send
 * @param isHTML Is the reply HTML
 * @param from The from header that should be used. Optional
 * @param replyTo The replyTo header that should be used. Optional
 * @param charset The charset that your message should be sent with. Optional. Default is UTF-8
 * @param attachments List of uploaded attachments to send with the reply. Optional.
 * @param templateVariables Template variables if using a template
 * @param template Template ID to use instead of body. Will use template variable map to fill defined variable slots.
 * @param sendStrategy How an email should be sent based on its recipients
 * @param useInboxName Optionally use inbox name as display name for sender email address
 * @param html 
 */

data class ReplyToEmailOptions (
    /* Body of the reply email you want to send */
    @SerializedName("body")
    val body: kotlin.String,
    /* Is the reply HTML */
    @SerializedName("isHTML")
    val isHTML: kotlin.Boolean,
    /* The from header that should be used. Optional */
    @SerializedName("from")
    val from: kotlin.String? = null,
    /* The replyTo header that should be used. Optional */
    @SerializedName("replyTo")
    val replyTo: kotlin.String? = null,
    /* The charset that your message should be sent with. Optional. Default is UTF-8 */
    @SerializedName("charset")
    val charset: kotlin.String? = null,
    /* List of uploaded attachments to send with the reply. Optional. */
    @SerializedName("attachments")
    val attachments: kotlin.collections.List<kotlin.String>? = null,
    /* Template variables if using a template */
    @SerializedName("templateVariables")
    val templateVariables: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null,
    /* Template ID to use instead of body. Will use template variable map to fill defined variable slots. */
    @SerializedName("template")
    val template: java.util.UUID? = null,
    /* How an email should be sent based on its recipients */
    @SerializedName("sendStrategy")
    val sendStrategy: ReplyToEmailOptions.SendStrategy? = null,
    /* Optionally use inbox name as display name for sender email address */
    @SerializedName("useInboxName")
    val useInboxName: kotlin.Boolean? = null,
    @SerializedName("html")
    val html: kotlin.Boolean? = null
) {

    /**
     * How an email should be sent based on its recipients
     * Values: SINGLE_MESSAGE
     */
    enum class SendStrategy(val value: kotlin.String) {
        @SerializedName(value = "SINGLE_MESSAGE") SINGLE_MESSAGE("SINGLE_MESSAGE");
    }
}

