/**
* MailSlurp API
* MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
*
* The version of the OpenAPI document: 6.5.2
* Contact: contact@mailslurp.dev
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.mailslurp.models


import com.squareup.moshi.Json

/**
 * Options for DNS query. 
 * @param hostname List of record types you wish to query such as MX, DNS, TXT, NS, A etc.
 * @param recordTypes List of record types you wish to query such as MX, DNS, TXT, NS, A etc.
 * @param omitFinalDNSDot Optionally control whether to omit the final dot in full DNS name values.
 */

data class DNSLookupOptions (
    /* List of record types you wish to query such as MX, DNS, TXT, NS, A etc. */
    @Json(name = "hostname")
    val hostname: kotlin.String,
    /* List of record types you wish to query such as MX, DNS, TXT, NS, A etc. */
    @Json(name = "recordTypes")
    val recordTypes: kotlin.collections.List<DNSLookupOptions.RecordTypes>,
    /* Optionally control whether to omit the final dot in full DNS name values. */
    @Json(name = "omitFinalDNSDot")
    val omitFinalDNSDot: kotlin.Boolean
) {

    /**
     * List of record types you wish to query such as MX, DNS, TXT, NS, A etc.
     * Values: A,NS,MD,MF,CNAME,SOA,MB,MG,MR,NULL,WKS,PTR,HINFO,MINFO,MX,TXT,RP,AFSDB,X25,ISDN,RT,NSAP,NSAP_PTR,SIG,KEY,PX,GPOS,AAAA,LOC,NXT,EID,NIMLOC,SRV,ATMA,NAPTR,KX,CERT,A6,DNAME,SINK,OPT,APL,DS,SSHFP,IPSECKEY,RRSIG,NSEC,DNSKEY,DHCID,NSEC3,NSEC3PARAM,TLSA,SMIMEA,HIP,NINFO,RKEY,TALINK,CDS,CDNSKEY,OPENPGPKEY,CSYNC,ZONEMD,SVCB,HTTPS,SPF,UINFO,UID,GID,UNSPEC,NID,L32,L64,LP,EUI48,EUI64,TKEY,TSIG,IXFR,AXFR,MAILB,MAILA,ANY,URI,CAA,AVC,DOA,AMTRELAY,TA,DLV
     */
    enum class RecordTypes(val value: kotlin.String) {
        @Json(name = "A") A("A"),
        @Json(name = "NS") NS("NS"),
        @Json(name = "MD") MD("MD"),
        @Json(name = "MF") MF("MF"),
        @Json(name = "CNAME") CNAME("CNAME"),
        @Json(name = "SOA") SOA("SOA"),
        @Json(name = "MB") MB("MB"),
        @Json(name = "MG") MG("MG"),
        @Json(name = "MR") MR("MR"),
        @Json(name = "NULL") NULL("NULL"),
        @Json(name = "WKS") WKS("WKS"),
        @Json(name = "PTR") PTR("PTR"),
        @Json(name = "HINFO") HINFO("HINFO"),
        @Json(name = "MINFO") MINFO("MINFO"),
        @Json(name = "MX") MX("MX"),
        @Json(name = "TXT") TXT("TXT"),
        @Json(name = "RP") RP("RP"),
        @Json(name = "AFSDB") AFSDB("AFSDB"),
        @Json(name = "X25") X25("X25"),
        @Json(name = "ISDN") ISDN("ISDN"),
        @Json(name = "RT") RT("RT"),
        @Json(name = "NSAP") NSAP("NSAP"),
        @Json(name = "NSAP_PTR") NSAP_PTR("NSAP_PTR"),
        @Json(name = "SIG") SIG("SIG"),
        @Json(name = "KEY") KEY("KEY"),
        @Json(name = "PX") PX("PX"),
        @Json(name = "GPOS") GPOS("GPOS"),
        @Json(name = "AAAA") AAAA("AAAA"),
        @Json(name = "LOC") LOC("LOC"),
        @Json(name = "NXT") NXT("NXT"),
        @Json(name = "EID") EID("EID"),
        @Json(name = "NIMLOC") NIMLOC("NIMLOC"),
        @Json(name = "SRV") SRV("SRV"),
        @Json(name = "ATMA") ATMA("ATMA"),
        @Json(name = "NAPTR") NAPTR("NAPTR"),
        @Json(name = "KX") KX("KX"),
        @Json(name = "CERT") CERT("CERT"),
        @Json(name = "A6") A6("A6"),
        @Json(name = "DNAME") DNAME("DNAME"),
        @Json(name = "SINK") SINK("SINK"),
        @Json(name = "OPT") OPT("OPT"),
        @Json(name = "APL") APL("APL"),
        @Json(name = "DS") DS("DS"),
        @Json(name = "SSHFP") SSHFP("SSHFP"),
        @Json(name = "IPSECKEY") IPSECKEY("IPSECKEY"),
        @Json(name = "RRSIG") RRSIG("RRSIG"),
        @Json(name = "NSEC") NSEC("NSEC"),
        @Json(name = "DNSKEY") DNSKEY("DNSKEY"),
        @Json(name = "DHCID") DHCID("DHCID"),
        @Json(name = "NSEC3") NSEC3("NSEC3"),
        @Json(name = "NSEC3PARAM") NSEC3PARAM("NSEC3PARAM"),
        @Json(name = "TLSA") TLSA("TLSA"),
        @Json(name = "SMIMEA") SMIMEA("SMIMEA"),
        @Json(name = "HIP") HIP("HIP"),
        @Json(name = "NINFO") NINFO("NINFO"),
        @Json(name = "RKEY") RKEY("RKEY"),
        @Json(name = "TALINK") TALINK("TALINK"),
        @Json(name = "CDS") CDS("CDS"),
        @Json(name = "CDNSKEY") CDNSKEY("CDNSKEY"),
        @Json(name = "OPENPGPKEY") OPENPGPKEY("OPENPGPKEY"),
        @Json(name = "CSYNC") CSYNC("CSYNC"),
        @Json(name = "ZONEMD") ZONEMD("ZONEMD"),
        @Json(name = "SVCB") SVCB("SVCB"),
        @Json(name = "HTTPS") HTTPS("HTTPS"),
        @Json(name = "SPF") SPF("SPF"),
        @Json(name = "UINFO") UINFO("UINFO"),
        @Json(name = "UID") UID("UID"),
        @Json(name = "GID") GID("GID"),
        @Json(name = "UNSPEC") UNSPEC("UNSPEC"),
        @Json(name = "NID") NID("NID"),
        @Json(name = "L32") L32("L32"),
        @Json(name = "L64") L64("L64"),
        @Json(name = "LP") LP("LP"),
        @Json(name = "EUI48") EUI48("EUI48"),
        @Json(name = "EUI64") EUI64("EUI64"),
        @Json(name = "TKEY") TKEY("TKEY"),
        @Json(name = "TSIG") TSIG("TSIG"),
        @Json(name = "IXFR") IXFR("IXFR"),
        @Json(name = "AXFR") AXFR("AXFR"),
        @Json(name = "MAILB") MAILB("MAILB"),
        @Json(name = "MAILA") MAILA("MAILA"),
        @Json(name = "ANY") ANY("ANY"),
        @Json(name = "URI") URI("URI"),
        @Json(name = "CAA") CAA("CAA"),
        @Json(name = "AVC") AVC("AVC"),
        @Json(name = "DOA") DOA("DOA"),
        @Json(name = "AMTRELAY") AMTRELAY("AMTRELAY"),
        @Json(name = "TA") TA("TA"),
        @Json(name = "DLV") DLV("DLV");
    }
}

