/**
* MailSlurp API
* MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
*
* The version of the OpenAPI document: 6.5.2
* Contact: contact@mailslurp.dev
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.mailslurp.models


import com.squareup.moshi.Json

/**
 * Representation a user's account
 * @param id 
 * @param apiKey 
 * @param emailAddress 
 * @param emailAddressMd5 
 * @param hasPassword 
 * @param isFrozen 
 * @param created 
 * @param userType 
 * @param organization Does user belong to an organization
 * @param verified Has user accepted an organization invite
 * @param addNewContacts 
 * @param ssoProvider 
 * @param customerId 
 * @param hasOnboarded 
 * @param imapUsername 
 * @param imapPassword 
 * @param smtpUsername 
 * @param smtpPassword 
 */

data class UserDto (
    @Json(name = "id")
    val id: java.util.UUID,
    @Json(name = "apiKey")
    val apiKey: kotlin.String,
    @Json(name = "emailAddress")
    val emailAddress: kotlin.String,
    @Json(name = "emailAddressMd5")
    val emailAddressMd5: kotlin.String,
    @Json(name = "hasPassword")
    val hasPassword: kotlin.Boolean,
    @Json(name = "isFrozen")
    val isFrozen: kotlin.Boolean,
    @Json(name = "created")
    val created: java.time.OffsetDateTime? = null,
    @Json(name = "userType")
    val userType: UserDto.UserType? = null,
    /* Does user belong to an organization */
    @Json(name = "organization")
    val organization: java.util.UUID? = null,
    /* Has user accepted an organization invite */
    @Json(name = "verified")
    val verified: UserDto.Verified? = null,
    @Json(name = "addNewContacts")
    val addNewContacts: kotlin.Boolean? = null,
    @Json(name = "ssoProvider")
    val ssoProvider: kotlin.String? = null,
    @Json(name = "customerId")
    val customerId: kotlin.String? = null,
    @Json(name = "hasOnboarded")
    val hasOnboarded: kotlin.Boolean? = null,
    @Json(name = "imapUsername")
    val imapUsername: kotlin.String? = null,
    @Json(name = "imapPassword")
    val imapPassword: kotlin.String? = null,
    @Json(name = "smtpUsername")
    val smtpUsername: kotlin.String? = null,
    @Json(name = "smtpPassword")
    val smtpPassword: kotlin.String? = null
) {

    /**
     * 
     * Values: sOLO,cHILDSOLO,cHILDTEAM
     */
    enum class UserType(val value: kotlin.String) {
        @Json(name = "SOLO") sOLO("SOLO"),
        @Json(name = "CHILD_SOLO") cHILDSOLO("CHILD_SOLO"),
        @Json(name = "CHILD_TEAM") cHILDTEAM("CHILD_TEAM");
    }
    /**
     * Has user accepted an organization invite
     * Values: vERIFIED,pENDING
     */
    enum class Verified(val value: kotlin.String) {
        @Json(name = "VERIFIED") vERIFIED("VERIFIED"),
        @Json(name = "PENDING") pENDING("PENDING");
    }
}

