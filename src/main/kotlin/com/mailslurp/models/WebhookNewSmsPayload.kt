/**
* MailSlurp API
* MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
*
* The version of the OpenAPI document: 6.5.2
* Contact: contact@mailslurp.dev
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.mailslurp.models


import com.google.gson.annotations.SerializedName

/**
 * NEW_SMS webhook payload. Sent to your webhook url endpoint via HTTP POST when an sms is received by the phone number that your webhook is attached to. Use the SMS ID to fetch the full SMS details.
 * @param messageId Idempotent message ID. Store this ID locally or in a database to prevent message duplication.
 * @param webhookId ID of webhook entity being triggered
 * @param eventName Name of the event type webhook is being triggered for.
 * @param smsId ID of SMS message
 * @param userId User ID of event
 * @param phoneNumber ID of phone number receiving SMS
 * @param toNumber Recipient phone number
 * @param fromNumber Sender phone number
 * @param body SMS message body
 * @param read SMS has been read
 * @param webhookName Name of the webhook being triggered
 */

data class WebhookNewSmsPayload (
    /* Idempotent message ID. Store this ID locally or in a database to prevent message duplication. */
    @SerializedName("messageId")
    val messageId: kotlin.String,
    /* ID of webhook entity being triggered */
    @SerializedName("webhookId")
    val webhookId: java.util.UUID,
    /* Name of the event type webhook is being triggered for. */
    @SerializedName("eventName")
    val eventName: WebhookNewSmsPayload.EventName,
    /* ID of SMS message */
    @SerializedName("smsId")
    val smsId: java.util.UUID,
    /* User ID of event */
    @SerializedName("userId")
    val userId: java.util.UUID,
    /* ID of phone number receiving SMS */
    @SerializedName("phoneNumber")
    val phoneNumber: java.util.UUID,
    /* Recipient phone number */
    @SerializedName("toNumber")
    val toNumber: kotlin.String,
    /* Sender phone number */
    @SerializedName("fromNumber")
    val fromNumber: kotlin.String,
    /* SMS message body */
    @SerializedName("body")
    val body: kotlin.String,
    /* SMS has been read */
    @SerializedName("read")
    val read: kotlin.Boolean,
    /* Name of the webhook being triggered */
    @SerializedName("webhookName")
    val webhookName: kotlin.String? = null
) {

    /**
     * Name of the event type webhook is being triggered for.
     * Values: EMAIL_RECEIVED,NEW_EMAIL,NEW_CONTACT,NEW_ATTACHMENT,EMAIL_OPENED,EMAIL_READ,DELIVERY_STATUS,BOUNCE,BOUNCE_RECIPIENT,NEW_SMS
     */
    enum class EventName(val value: kotlin.String) {
        @SerializedName(value = "EMAIL_RECEIVED") EMAIL_RECEIVED("EMAIL_RECEIVED"),
        @SerializedName(value = "NEW_EMAIL") NEW_EMAIL("NEW_EMAIL"),
        @SerializedName(value = "NEW_CONTACT") NEW_CONTACT("NEW_CONTACT"),
        @SerializedName(value = "NEW_ATTACHMENT") NEW_ATTACHMENT("NEW_ATTACHMENT"),
        @SerializedName(value = "EMAIL_OPENED") EMAIL_OPENED("EMAIL_OPENED"),
        @SerializedName(value = "EMAIL_READ") EMAIL_READ("EMAIL_READ"),
        @SerializedName(value = "DELIVERY_STATUS") DELIVERY_STATUS("DELIVERY_STATUS"),
        @SerializedName(value = "BOUNCE") BOUNCE("BOUNCE"),
        @SerializedName(value = "BOUNCE_RECIPIENT") BOUNCE_RECIPIENT("BOUNCE_RECIPIENT"),
        @SerializedName(value = "NEW_SMS") NEW_SMS("NEW_SMS");
    }
}

