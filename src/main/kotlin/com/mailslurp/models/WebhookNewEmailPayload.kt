/**
* MailSlurp API
* MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
*
* The version of the OpenAPI document: 6.5.2
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.mailslurp.models

import com.mailslurp.models.AttachmentMetaData

import com.squareup.moshi.Json

/**
 * NEW_EMAIL webhook payload. Sent to your webhook url endpoint via HTTP POST when an email is received by the inbox that your webhook is attached to. Use the email ID to fetch the full email body or attachments.
 * @param messageId Idempotent message ID. Store this ID locally or in a database to prevent message duplication.
 * @param webhookId ID of webhook entity being triggered
 * @param eventName Name of the event type webhook is being triggered for.
 * @param webhookName Name of the webhook being triggered
 * @param inboxId Id of the inbox that received an email
 * @param emailId ID of the email that was received. Use this ID for fetching the email with the `EmailController`.
 * @param createdAt Date time of event creation
 * @param to List of `To` recipient email addresses that the email was addressed to. See recipients object for names.
 * @param from Who the email was sent from. An email address - see fromName for the sender name.
 * @param cc List of `CC` recipients email addresses that the email was addressed to. See recipients object for names.
 * @param bcc List of `BCC` recipients email addresses that the email was addressed to. See recipients object for names.
 * @param subject The subject line of the email message as specified by SMTP subject header
 * @param attachmentMetaDatas List of attachment meta data objects if attachments present
 */

data class WebhookNewEmailPayload (
    /* Idempotent message ID. Store this ID locally or in a database to prevent message duplication. */
    @Json(name = "messageId")
    val messageId: kotlin.String? = null,
    /* ID of webhook entity being triggered */
    @Json(name = "webhookId")
    val webhookId: java.util.UUID? = null,
    /* Name of the event type webhook is being triggered for. */
    @Json(name = "eventName")
    val eventName: WebhookNewEmailPayload.EventName? = null,
    /* Name of the webhook being triggered */
    @Json(name = "webhookName")
    val webhookName: kotlin.String? = null,
    /* Id of the inbox that received an email */
    @Json(name = "inboxId")
    val inboxId: java.util.UUID? = null,
    /* ID of the email that was received. Use this ID for fetching the email with the `EmailController`. */
    @Json(name = "emailId")
    val emailId: java.util.UUID? = null,
    /* Date time of event creation */
    @Json(name = "createdAt")
    val createdAt: java.time.OffsetDateTime? = null,
    /* List of `To` recipient email addresses that the email was addressed to. See recipients object for names. */
    @Json(name = "to")
    val to: kotlin.collections.List<kotlin.String>? = null,
    /* Who the email was sent from. An email address - see fromName for the sender name. */
    @Json(name = "from")
    val from: kotlin.String? = null,
    /* List of `CC` recipients email addresses that the email was addressed to. See recipients object for names. */
    @Json(name = "cc")
    val cc: kotlin.collections.List<kotlin.String>? = null,
    /* List of `BCC` recipients email addresses that the email was addressed to. See recipients object for names. */
    @Json(name = "bcc")
    val bcc: kotlin.collections.List<kotlin.String>? = null,
    /* The subject line of the email message as specified by SMTP subject header */
    @Json(name = "subject")
    val subject: kotlin.String? = null,
    /* List of attachment meta data objects if attachments present */
    @Json(name = "attachmentMetaDatas")
    val attachmentMetaDatas: kotlin.collections.List<AttachmentMetaData>? = null
) {

    /**
     * Name of the event type webhook is being triggered for.
     * Values: eMAILRECEIVED,nEWEMAIL,nEWCONTACT,nEWATTACHMENT,eMAILOPENED,eMAILREAD
     */
    enum class EventName(val value: kotlin.String) {
        @Json(name = "EMAIL_RECEIVED") eMAILRECEIVED("EMAIL_RECEIVED"),
        @Json(name = "NEW_EMAIL") nEWEMAIL("NEW_EMAIL"),
        @Json(name = "NEW_CONTACT") nEWCONTACT("NEW_CONTACT"),
        @Json(name = "NEW_ATTACHMENT") nEWATTACHMENT("NEW_ATTACHMENT"),
        @Json(name = "EMAIL_OPENED") eMAILOPENED("EMAIL_OPENED"),
        @Json(name = "EMAIL_READ") eMAILREAD("EMAIL_READ");
    }
}

