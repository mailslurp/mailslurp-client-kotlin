/**
* MailSlurp API
* MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
*
* The version of the OpenAPI document: 6.5.2
* Contact: contact@mailslurp.dev
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.mailslurp.models

import com.mailslurp.models.DomainNameRecord

import com.squareup.moshi.Json

/**
 * Domain plus verification records and status
 * @param id 
 * @param userId 
 * @param domain Custom domain name
 * @param verificationToken Verification tokens
 * @param dkimTokens Unique token DKIM tokens
 * @param isVerified Whether domain has been verified or not. If the domain is not verified after 72 hours there is most likely an issue with the domains DNS records.
 * @param domainNameRecords List of DNS domain name records (C, MX, TXT) etc that you must add to the DNS server associated with your domain provider.
 * @param createdAt 
 * @param updatedAt 
 * @param domainType Type of domain. Dictates type of inbox that can be created with domain. HTTP means inboxes are processed using SES while SMTP inboxes use a custom SMTP mail server. SMTP does not support sending so use HTTP for sending emails.
 * @param catchAllInboxId The optional catch all inbox that will receive emails sent to the domain that cannot be matched.
 */

data class DomainDto (
    @Json(name = "id")
    val id: java.util.UUID,
    @Json(name = "userId")
    val userId: java.util.UUID,
    /* Custom domain name */
    @Json(name = "domain")
    val domain: kotlin.String,
    /* Verification tokens */
    @Json(name = "verificationToken")
    val verificationToken: kotlin.String,
    /* Unique token DKIM tokens */
    @Json(name = "dkimTokens")
    val dkimTokens: kotlin.collections.List<kotlin.String>,
    /* Whether domain has been verified or not. If the domain is not verified after 72 hours there is most likely an issue with the domains DNS records. */
    @Json(name = "isVerified")
    val isVerified: kotlin.Boolean,
    /* List of DNS domain name records (C, MX, TXT) etc that you must add to the DNS server associated with your domain provider. */
    @Json(name = "domainNameRecords")
    val domainNameRecords: kotlin.collections.List<DomainNameRecord>,
    @Json(name = "createdAt")
    val createdAt: java.time.OffsetDateTime,
    @Json(name = "updatedAt")
    val updatedAt: java.time.OffsetDateTime,
    /* Type of domain. Dictates type of inbox that can be created with domain. HTTP means inboxes are processed using SES while SMTP inboxes use a custom SMTP mail server. SMTP does not support sending so use HTTP for sending emails. */
    @Json(name = "domainType")
    val domainType: DomainDto.DomainType,
    /* The optional catch all inbox that will receive emails sent to the domain that cannot be matched. */
    @Json(name = "catchAllInboxId")
    val catchAllInboxId: java.util.UUID? = null
) {

    /**
     * Type of domain. Dictates type of inbox that can be created with domain. HTTP means inboxes are processed using SES while SMTP inboxes use a custom SMTP mail server. SMTP does not support sending so use HTTP for sending emails.
     * Values: hTTPINBOX,sMTPDOMAIN
     */
    enum class DomainType(val value: kotlin.String) {
        @Json(name = "HTTP_INBOX") hTTPINBOX("HTTP_INBOX"),
        @Json(name = "SMTP_DOMAIN") sMTPDOMAIN("SMTP_DOMAIN");
    }
}

