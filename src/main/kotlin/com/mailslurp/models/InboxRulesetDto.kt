/**
* MailSlurp API
* MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
*
* The version of the OpenAPI document: 6.5.2
* Contact: contact@mailslurp.dev
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.mailslurp.models


import com.google.gson.annotations.SerializedName

/**
 * Rules for inbox
 * @param id 
 * @param inboxId 
 * @param scope 
 * @param action 
 * @param target 
 * @param handler 
 * @param createdAt 
 */

data class InboxRulesetDto (
    @SerializedName("id")
    val id: java.util.UUID,
    @SerializedName("inboxId")
    val inboxId: java.util.UUID,
    @SerializedName("scope")
    val scope: InboxRulesetDto.Scope,
    @SerializedName("action")
    val action: InboxRulesetDto.Action,
    @SerializedName("target")
    val target: kotlin.String,
    @SerializedName("handler")
    val handler: InboxRulesetDto.Handler,
    @SerializedName("createdAt")
    val createdAt: java.time.OffsetDateTime
) {

    /**
     * 
     * Values: RECEIVING_EMAILS,SENDING_EMAILS
     */
    enum class Scope(val value: kotlin.String) {
        @SerializedName(value = "RECEIVING_EMAILS") RECEIVING_EMAILS("RECEIVING_EMAILS"),
        @SerializedName(value = "SENDING_EMAILS") SENDING_EMAILS("SENDING_EMAILS");
    }
    /**
     * 
     * Values: BLOCK,ALLOW,FILTER_REMOVE
     */
    enum class Action(val value: kotlin.String) {
        @SerializedName(value = "BLOCK") BLOCK("BLOCK"),
        @SerializedName(value = "ALLOW") ALLOW("ALLOW"),
        @SerializedName(value = "FILTER_REMOVE") FILTER_REMOVE("FILTER_REMOVE");
    }
    /**
     * 
     * Values: EXCEPTION
     */
    enum class Handler(val value: kotlin.String) {
        @SerializedName(value = "EXCEPTION") EXCEPTION("EXCEPTION");
    }
}

