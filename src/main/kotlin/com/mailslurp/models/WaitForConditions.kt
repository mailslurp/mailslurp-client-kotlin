/**
* MailSlurp API
* MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
*
* The version of the OpenAPI document: 6.5.2
* Contact: contact@mailslurp.dev
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.mailslurp.models

import com.mailslurp.models.MatchOption

import com.squareup.moshi.Json

/**
 * Conditions to apply to emails that you are waiting for
 * @param timeout Max time in milliseconds to retry the `waitFor` operation until conditions are met.
 * @param inboxId 
 * @param count Number of results that should match conditions. Either exactly or at least this amount based on the `countType`. If count condition is not met and the timeout has not been reached the `waitFor` method will retry the operation.
 * @param delayTimeout Max time in milliseconds to wait between retries if a `timeout` is specified.
 * @param unreadOnly Apply conditions only to **unread** emails. All emails begin with `read=false`. An email is marked `read=true` when an `EmailDto` representation of it has been returned to the user at least once. For example you have called `getEmail` or `waitForLatestEmail` etc., or you have viewed the email in the dashboard.
 * @param countType How result size should be compared with the expected size. Exactly or at-least matching result?
 * @param matches 
 * @param sortDirection 
 * @param since 
 * @param before 
 */

data class WaitForConditions (
    /* Max time in milliseconds to retry the `waitFor` operation until conditions are met. */
    @Json(name = "timeout")
    val timeout: kotlin.Long,
    @Json(name = "inboxId")
    val inboxId: java.util.UUID? = null,
    /* Number of results that should match conditions. Either exactly or at least this amount based on the `countType`. If count condition is not met and the timeout has not been reached the `waitFor` method will retry the operation. */
    @Json(name = "count")
    val count: kotlin.Int? = null,
    /* Max time in milliseconds to wait between retries if a `timeout` is specified. */
    @Json(name = "delayTimeout")
    val delayTimeout: kotlin.Long? = null,
    /* Apply conditions only to **unread** emails. All emails begin with `read=false`. An email is marked `read=true` when an `EmailDto` representation of it has been returned to the user at least once. For example you have called `getEmail` or `waitForLatestEmail` etc., or you have viewed the email in the dashboard. */
    @Json(name = "unreadOnly")
    val unreadOnly: kotlin.Boolean? = null,
    /* How result size should be compared with the expected size. Exactly or at-least matching result? */
    @Json(name = "countType")
    val countType: WaitForConditions.CountType? = null,
    @Json(name = "matches")
    val matches: kotlin.collections.List<MatchOption>? = null,
    @Json(name = "sortDirection")
    val sortDirection: WaitForConditions.SortDirection? = null,
    @Json(name = "since")
    val since: java.time.OffsetDateTime? = null,
    @Json(name = "before")
    val before: java.time.OffsetDateTime? = null
) {

    /**
     * How result size should be compared with the expected size. Exactly or at-least matching result?
     * Values: eXACTLY,aTLEAST
     */
    enum class CountType(val value: kotlin.String) {
        @Json(name = "EXACTLY") eXACTLY("EXACTLY"),
        @Json(name = "ATLEAST") aTLEAST("ATLEAST");
    }
    /**
     * 
     * Values: aSC,dESC
     */
    enum class SortDirection(val value: kotlin.String) {
        @Json(name = "ASC") aSC("ASC"),
        @Json(name = "DESC") dESC("DESC");
    }
}

